plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'io.freefair.lombok' version '8.4'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
    id 'org.hidetake.swagger.generator' version '2.19.2'
//    id 'org.graalvm.buildtools.native' version '0.9.28'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id "org.jetbrains.kotlin.plugin.spring" version "1.9.22"
    id "org.jetbrains.kotlin.kapt" version "1.9.22"
}

group 'plus.maa'
version '1.0-SNAPSHOT'

repositories {
    maven {
        url 'https://maven.aliyun.com/repository/public/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring/'
    }
    mavenCentral()
}

ext {
    // 统一管理版本号
    hutoolVersion = '5.8.22'
    mapstructVersion = '1.5.5.Final'
}

dependencies {

    kapt 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    //springdoc相关依赖没有被自动管理，必须保留版本号
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'com.github.therapi:therapi-runtime-javadoc:0.13.0'
    kapt 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'

    // kotlin
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // kotlin-logging
    implementation 'io.github.oshai:kotlin-logging-jvm:5.1.0'

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    // 双引号才能使用变量
    implementation "cn.hutool:hutool-extra:$hutoolVersion"
    implementation "cn.hutool:hutool-jwt:$hutoolVersion"
    implementation "cn.hutool:hutool-dfa:$hutoolVersion"

    // mapstruct and lombok
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    kapt "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.6.0.202305301015-r'
    implementation 'org.eclipse.jgit:org.eclipse.jgit.ssh.apache.agent:6.6.0.202305301015-r'
    implementation 'org.freemarker:freemarker:2.3.32'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.6'
    implementation 'com.github.erosb:everit-json-schema:1.14.2'
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'org.aspectj:aspectjweaver:1.9.19'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    swaggerCodegen 'org.openapitools:openapi-generator-cli:6.5.0'

}

kapt {
    keepJavacAnnotationProcessors = true
}

test {
    useJUnitPlatform()
}

def swagger_output_dir = "$buildDir/docs"
def swagger_output_name = 'swagger.json'


openApi {
    apiDocsUrl.set("http://localhost:8848/v3/api-docs")
    outputDir.set(file(swagger_output_dir))
    outputFileName.set(swagger_output_name)
    waitTimeInSeconds.set(30)
}

swaggerSources {
    def client_dir = "$buildDir/clients"
    TsFetch {
        inputFile = file("$swagger_output_dir/$swagger_output_name")
        code {
            language = 'typescript-fetch'
            configFile = file('client-config/ts-fetch.json')
//            templateDir = file('client-config/typescript-fetch')
            rawOptions = ["-e", "mustache"]
            outputDir = file("$client_dir/ts-fetch-client")
        }
    }
    CSharp {
        inputFile = file("$swagger_output_dir/$swagger_output_name")
        code {
            language = 'csharp-netcore'
            configFile = file('client-config/csharp-netcore.json')
            outputDir = file("$client_dir/csharp-client")
//            rawOptions = [
//                    "--type-mappings", "binary=System.IO.Stream"
//            ]
        }
    }
    Cpp {
        inputFile = file("$swagger_output_dir/$swagger_output_name")
        code {
            language = 'cpp-restsdk'
            configFile = file('client-config/cpp.json')
            outputDir = file("$client_dir/cpp-client")
        }
    }
    Rust {
        inputFile = file("$swagger_output_dir/$swagger_output_name")
        code {
            language = 'rust'
            configFile = file('client-config/rust.json')
            outputDir = file("$client_dir/rust-client")
        }
    }
}

rootProject.afterEvaluate() {
    def forkedSpringBootRun = project.tasks.named("forkedSpringBootRun")
    forkedSpringBootRun.configure {
        doNotTrackState("See https://github.com/springdoc/springdoc-openapi-gradle-plugin/issues/102")
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id", "git.commit.id.abbrev", "git.commit.time"]
}
